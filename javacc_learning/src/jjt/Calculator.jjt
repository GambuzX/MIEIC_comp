options
{
 LOOKAHEAD=1;
}
PARSER_BEGIN(Calculator)
import java.util.Map;
import java.util.HashMap;
public class Calculator {

    final Map<String, Integer> assignments = new HashMap();

    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for a calculator that accepts expressions with integers, +,-,*,/,(,and ).");
        System.out.println("Write an arithmetic expression:");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // returns reference to root node

        root.dump(""); // prints the tree on the screen
        System.out.println("Expression value: " + myCalc.traverse(root));
    }

    int traverse(SimpleNode node){
        for(int i = 0; i < node.jjtGetNumChildren() - 1; i++){
            eval((SimpleNode) node.jjtGetChild(i));
        }
        return eval((SimpleNode) node.jjtGetChild(node.jjtGetNumChildren() - 1));
    }

    int eval(SimpleNode node) {
        if(node.jjtGetNumChildren() == 0) { // leaf node with integer value or symbol
            return node.id != CalculatorTreeConstants.JJTRETRIEVE ? node.val : assignments.get("" + node.label);
        }
        else if(node.jjtGetNumChildren() == 1) {// only one child

            if(node.id == CalculatorTreeConstants.JJTASSIGN) {
                assignments.put("" + node.label, eval((SimpleNode) node.jjtGetChild(0)));
                return 0;
            }
            return this.eval((SimpleNode) node.jjtGetChild(0));
        }
        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
        switch(node.id) {
         case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
         case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
         case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
         case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
         default : // abort
            System.out.println("Ilegal operator " + node.id + "!");
            System.exit(1);
        }
        return 0;
    }
}
PARSER_END(Calculator)
SKIP :
{
    " " | "\r" | "\t"
}
TOKEN:
{
     < INTEGER: (["0"-"9"])+ >
    | < LF: "\n" >
    | <SYMBOL: ["A"-"Z", "a"-"z"](["A"-"Z", "a"-"z", "0"-"9"])*>
    | <PV: ";" >
}

SimpleNode Expression(): {}
{
    (Expr())* <LF> {return jjtThis;} // Java code inside brackets
}

void Expr():{Token t;}
{
    (LOOKAHEAD(2) (t=<SYMBOL>{jjtThis.label = t.image;} "=" Expr1(1)) #Assign(1)
    | Expr1(1))
    <PV><LF>
}

void Expr1(int sign) #void :{}
{
    Expr2(sign)
    [
        ("+" Expr2(sign) #Add(2)
        | "-" Expr2(sign) #Sub(2))
    ]
}

void Expr2(int sign) #void : {}
{
    Expr3(sign)
    ("*" Expr3(1) #Mul(2)
    | "/" Expr3(1) #Div(2))?
}

void Expr3(int sign) #void : {Token t;}
{
    t= <INTEGER>{jjtThis.val = sign * Integer.parseInt(t.image);} #Term
    | t= <SYMBOL>{jjtThis.label = t.image;} #Retrieve
    | "-" Expr3(-sign)
    | "(" Expr1(sign) ")"
}